linear search => we search the elements in linear way ,searching elements in array one by one is called linear search 
  => we use this search for short arrays ,time complexity o(n)


  code : 
  public class Main {
    public static void main(String[] args) {
        int[] arr = {5, 8, 11, 14, 16};
        int target = 14;
        System.out.println(index(arr, target));
    }

    public static int index(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                return i; // return the index directly
            }
        }
        return -1; // if not found
    }
}


1.snippet : snippet is actual code but without exact declarations 
2.code : code with all declarations ,main method and all 




binary search:  1.binary search time complexity is o(log n) 
  2.array should be sorted to do binary search ;
  3.initialize low,high value and take while loop with condition low is less than or equal to high 
  4.initialize mid value as (low+high)/2 
  5.compare middle element arr[mid] with target if it is equal return mid value 
  6.if array[mid] is smaller to target update low=mid+1 ,we definitely dont get value at low so move low pointer 
  7.if array[mid] is greater than target update high=mid-1 ,we definitely dont get value at right so move high value.



  code : 
    import java.util.*;

public class Main {
    public static void main(String[] args) {
      int[] arr={5,8,11,14,16};
      int target=16;
      System.out.println(binarysearch(arr,target));
  }
  
  public static int binarysearch(int[] arr,int target){
    int low=0;
    int high=arr.length-1;
   
    while(low<=high){
      int mid=(low+high)/2;
      if(arr[mid]==target){
        return mid;
      }
      else if(arr[mid]<target){
        low=mid+1;
      }
      else{
        high=mid-1;
      }
    }
    return -1;
  }
}
