=== datastructures ==== : 
1.Liked list 
2.Stacks and Queues 
3.trees and graphs 
4.Heaps 

=== Algorithms ===:
1.sorting 
2.searching 
3.dynamic programming  

  Time complexity constraints : 1)ignore smaller  values 
                                2)focus on worst case 
                                3)ignore constants 
    to solve a problem we have 3 steps 
    in step 1 : write some lines and it contains 2 for loops to get step 2
    and in step 2 we run one more for loop to get step 3 
    and in step 3 we write the code in constant time 
    if we analize the code the timecomplexity will be n**2 for step 1 and n for step2 and 1(constant) for step3
    to get the time complexity for the code we follow time complexity contraints like ignore small values,constants and final time complexity will be n**2 .

    Best canse ,Average Case and Worst Case  

    Best Case : getiing output in less time complexity 
    Worst Case : getting output in more Time complexity [O(f)]
    Average Case: average of best and worst 
    
  Space complexity : if we use any extra space for solving the problem that extra space is consider as space complexity 

 === linear  | non linear ===== : 
linked list  |  trees 
stacks       |  graphs 
quesues      |
             |


linked list code :
import java.util.*;

class Node {
    int data;
    Node next;

    Node(int data1) {
        this.data = data1;
        this.next = null;
    }

    Node(int data1, Node next1) {
        this.data = data1;
        this.next = next1;
    }
}

public class Main {

    // Function to store elements in nodes
    public static Node converting(int[] arr) {
        if (arr.length == 0) return null;

        Node head = new Node(arr[0]);
        Node current = head;
        for (int i = 1; i < arr.length; i++) {
            Node temp = new Node(arr[i]);
            current.next = temp;
            current = temp;
        }
        return head;
    }

    // Function to print elements from linked list
    public static void printing(Node head) {
        Node temp = head;
        while (temp != null) {
            System.out.println(temp.data);
            temp = temp.next;
        }
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        Node head = converting(arr);
        printing(head);
    }
}


